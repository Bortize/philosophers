Capítulo II
Parte obligatoria

Tendrás que escribir un programa para la parte obligatoria y un programa para la
parte bonus. Ambos seguirán los mismos principios:

	• Este proyecto se debe programar en C, siguiendo la Norma. Cualquier leak, crash,
	comportamiento indefinido o error de Norma significa un 0.

	• Varios filósofos se sientan en una mesa redonda haciendo una de estas tres cosas:
	comer, pensar o dormir.

	• Mientras comen, no piensan ni duermen. Mientras duermen, ni comen ni piensan y,
	por supuesto, mientras piensan no comen o duermen.

	• Los filósofos se sientan en una mesa circular con un gran bol de espaguetis en el
	centro.

	• Hay algunos palillos en la mesa.

	• Dado que los espaguetis son difíciles de servir y comer con un solo palillo, se asume
	que un filósofo debe comer con dos palillos, uno por cada mano.

	• Los filósofos nunca deben estar hambrientos.

	• Cada filósofo debe comer.

	• Los filósofos no hablan entre ellos.

	• Los filósofos no saben cuando otro filósofo va a morir.

	• Cada vez que un filósofo ha terminado de comer, dejará los palillos y empezará
	a dormir.

	• Cuando un filósofo termina de dormir, empezará a pensar.

	• La simulación termina cuando un filósofo muere.

	• Cada programa debe aceptar el mismo número de opciones: número_de_filósofos
	tiempo_para_morir tiempo_para_comer tiempo_para _dormir
	[número_de_veces_que_cada_filósofo_debe_comer]

		◦ número_de_filósofos: es el número de filósfos y también el número de palillos.

		◦ tiempo_para_morir: en milisegundos, si un filósofo no empieza a comer
		tiempo_para_morir milisegundos después de su última comida o de la simulación, muere.

		◦ tiempo_para_comer: en milisegundos, el tiempo que usa cada filósofo para
		comer. Durante ese tiempo usará dos tenedores.

		◦ tiempo_para_dormir: en milisegundos, el tiempo que un filósofo pasa durmiendo.

		◦ número_de_veces_que_cada_filósofo_debe_comer: este argumento es opcional, si todos los filósofos comen al menos
		“número_de_veces_que_cada_filósofo_debe_comer”
		la simulación terminará. Si no se especifica, la simulación terminará solo tras
		la muerte de un filósofo.


	• Cada filósofo debe recibir un número del 1 al “número_de_filósofos”.

	• El filósofo número 1 está junto al filósofo “número_de_filósofos”. Cualquier otro
	filósofo con el número N está sentado entre el filósofo N 1 y el N + 1.

	• Cualquier cambio de estado de un filósofo debe mostrarse de la siguiente manera
	(reemplaza X por el número de filósofo y timestamp_en_ms por el timestamp actual
	en milisegundos):

		◦ timestamp_en_ms X has taken a fork

		◦ timestamp_en_ms X is eating

		◦ timestamp_en_ms X is sleeping

		◦ timestamp_en_ms X is thinking

		◦ timestamp_en_ms X died


	• El estado impreso no debe estar descoordinado o intercambiado con el estado de
	otro filósofo.

	• No puedes tener más de 10 ms entre la muerte de un filósofo y cuándo aparece su
	muerte.

	• De nuevo, evita que los filósofos mueran.

